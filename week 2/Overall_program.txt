

 This below program includes concepts like if-else, switch, loops, functions, error handling and array.

  Bash:
    result=()
    
    add(){
    if  [ $# -ne 2 ]; then
    echo "Elements should be only 2"
    return 1
    fi
    
    if ! [[ $1 =~ ^-?[0-9]+$ && $2 =~ ^-?[0-9]+$ ]]; then
    echo "error"
    return 1
    fi
    
    sum=$(( $1 + $2 ))
    result+=("$sum")
    echo $sum
    }
    
    sub(){
    if [ $# -ne 2 ]; then
    echo "Elements should be only 2"
    return 1
    fi
    
    if ! [[ $1 =~ ^-?[0-9]+$ && $2 =~ ^-?[0-9]+$ ]]; then
    echo "error"
    return 1
    fi
    
    minus=$(($1 - $2))
    result+=("$minus")
    echo $minus
    }
    
    mul(){
    if [ $# -ne 2 ]; then
    echo "Elements should be only 2"
    return 1
    fi
    
    if ! [[ $1 =~ ^-?[0-9]+$ && $2 =~ ^-?[0-9]+$ ]]; then
    echo "error"
    return 1
    fi
    
    mult=$(($1 * $2))
    result+=("$mult")
    echo $mult
    3xxcv34
    
    div(){
    if [ $# -ne 2 ]; then
    echo "Elements should be only 2"
    return 1
    fi
    
    if ! [[ $1 =~ ^-?[0-9]+$ && $2 =~ ^-?[0-9]+$ ]]; then
    echo "error"
    return 1
    fi

    if [ $2 -eq 0 ]; then
    echo "can't divide"
    return 1
    fi
    
    divi=$(($1 / $2))
    result+=("$divi")
    echo $divi
    }
    
    while true
    do
    read -p "Enter num1:" a
    read -p "Enter num2:" b
    echo "1. Add 2. Subtract 3. Multiply 4. Divide 5. Exit"
    read -p "Enter the choice" choice
    case $choice in
    	1) add "$a" "$b";;
    	2)
    	sub "$a" "$b"
    	;;
    	3)
    	mul "$a" "$b"
    	;;
    	4)
    	div "$a" "$b" 
    	;;
    	*)
    	break
    	;;
    esac
    done
    
    
    echo "${result[@]}"

Csh:
